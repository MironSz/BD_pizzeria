CREATE TABLE Pizza(
  id_pizzy SERIAL,
  nazwa_pizzy varchar(255) NOT NULL UNIQUE,
  cena FLOAT(10) NOT NULL,
  PRIMARY KEY (id_pizzy)
  );

CREATE TABLE Skladnik(
  id_skladnika SERIAL,
  nazwa_skladnika varchar(255) NOT NULL UNIQUE,
  ilosc int NOT NULL,
  PRIMARY KEY (id_skladnika)
  );

CREATE TABLE PolaczeniePizzaSkladnik(
  id_skladnika int NOT NULL,
  id_pizzy int NOT NULL,
  ilosc int NOT NULL,
  FOREIGN KEY (id_skladnika) REFERENCES Skladnik(id_skladnika),
  FOREIGN KEY (id_pizzy) REFERENCES Pizza(id_pizzy)
  );

CREATE TABLE Klient(
  id_klienta SERIAL,
  imie varchar(255),
  nazwisko varchar(255),
  opcja_polityczna varchar(255),
  PRIMARY KEY(id_klienta)
  );

CREATE TABLE Zamowienie(
  id_zamowienia SERIAL,
  id_klienta int NOT NULL,
  data_zamowienia date,
  udane boolean,
  PRIMARY KEY(id_zamowienia),
  FOREIGN KEY (id_klienta) REFERENCES Klient(id_klienta)
  );

CREATE TABLE PolaczaniePizzaZamowienie(
  id_zamowienia int NOT NULL,
  id_pizzy int NOT NULL,
  ilosc int NOT NULL,
  FOREIGN KEY (id_zamowienia) REFERENCES Zamowienie(id_zamowienia),
  FOREIGN KEY (id_pizzy) REFERENCES Pizza(id_pizzy)
  );



CREATE OR REPLACE FUNCTION czyscZamowienia() RETURNS void AS $$
BEGIN
    DELETE FROM PolaczeniePizzaZamowienie WHERE id_zamowienia IN (SELECT id_zamowienia FROM Zamowienie WHERE udane = false);
    DELETE FROM Zamowienie WHERE udane = false;
END;
$$ LANGUAGE plpgsql;




    CREATE OR REPLACE FUNCTION sprawdzSkladniki(id integer) RETURNS boolean AS $$
DECLARE
    ileBrakuje integer;
BEGIN
SELECT  COUNT(Zamowienie.id_zamowienia) INTO ileBrakuje FROM Zamowienie 
JOIN PolaczeniePizzaZamowienie on Zamowienie.id_zamowienia = PolaczniePizzaZamowienie.id_zamowienia
JOIN Pizza.id_pizzy on Zamowienie.id_pizzyy = Pizzy.id_pizzy
JOIN PolaczeniePizzaSkladnik ON PolaczeniePizzaSkladnik.id_pizzy = Pizza.id_pizzy
JOIN Skladnik ON PolaczeniePizzaSkladnik.id_skladnika = Skladnik.id_skladnika
WHERE (PolaczeniePizzaZamowienie.ilosc * PolaczeniePizzaSkladnik.ilosc > Skladnik.ilosc AND                                 Zamowienie.id_zamowienia= id);

    RETURN ileBrakuje = 0;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION uczynZamowienie(id integer) RETURNS boolean AS $$
DECLARE
    daSie boolean;
    rec record;
BEGIN
    dasie = sprawdzSkladniki(id);
    IF daSie   THEN
        FOR rec IN (SELECT PolaczeniePizzaZamowienie.ilosc * PolaczeniePizzaSkladnik.ilosc AS iloscZuzytych, Skladnik.id_skladnika AS                      id_skladnika FROM Skladnik JOIN PolaczeniePizzaSkladnik 
                 ON SKladnik.id_skladnika = PolaczeniePizzaSkladnik.id_skladnika JOIN Pizza
                 ON Pizza.id_pizzy = PolaczeniePizzaSkladnik.id_pizzy JOIN PolaczeniePizzaZamowienie
                 ON Pizza.id_pizzy = PolaczeniePizzaZamowienie.id_pizzy JOIN Zamowienie
                 ON PolaczeniePizzaZamowienie.id_zamowienia = Zamowienie.id_pizzy 
                 WHERE Zamowienie.id_zamowienia = id)
        LOOP
            UPDATE Skladnik SET ilosc = ilosc - rec.iloscZuzytych WHERE id_zkladnika = rec.id_skladnika;
        END LOOP;
    END IF;
    RETURN daSie;
END;
$$ LANGUAGE plpgsql;

